using System;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Compute;
using Microsoft.Azure.Management.Compute.Models;
using Microsoft.Azure.Management.ResourceManager.Fluent;
using Microsoft.Azure.Management.ResourceManager.Fluent.Authentication;
using Microsoft.Rest.Azure.Authentication;

class Program
{
    static async Task Main(string[] args)
    {
        string clientId = "YourClientId";
        string clientSecret = "YourClientSecret";
        string tenantId = "YourTenantId";
        string subscriptionId = "YourSubscriptionId";
        string resourceGroupName = "YourResourceGroupName";
        string diskAccessName = "YourDiskAccessName";

        var serviceClientCredentials = await ApplicationTokenProvider.LoginSilentAsync(tenantId, clientId, clientSecret);
        var computeClient = new ComputeManagementClient(serviceClientCredentials) { SubscriptionId = subscriptionId };

        var disks = await computeClient.Disks.ListByResourceGroupAsync(resourceGroupName);

        foreach (var disk in disks)
        {
            if (disk.DiskAccessId != null && disk.DiskAccessId.Contains(diskAccessName))
            {
                await computeClient.Disks.DeleteAsync(resourceGroupName, disk.Name);
                Console.WriteLine($"Deleted disk: {disk.Name}");
            }
        }

        Console.WriteLine("All associated backup disks have been deleted.");
    }
}


using System;
using System.Threading.Tasks;
using Azure.Identity;
using Azure.ResourceManager.ResourceGraph;
using Azure.ResourceManager.ResourceGraph.Models;

class Program
{
    static async Task Main(string[] args)
    {
        string subscriptionId = "YourSubscriptionId";
        string diskAccessId = "/subscriptions/YourSubscriptionId/resourceGroups/YourResourceGroupName/providers/Microsoft.Compute/diskAccesses/YourDiskAccessName";

        var credential = new DefaultAzureCredential();
        var resourceGraphClient = new ResourceGraphClient(credential);

        string query = $@"
            resources
            | where type == 'microsoft.compute/disks'
            | where properties.diskAccessId == '{diskAccessId}'
            | project id, name, type, location
        ";

        var queryRequest = new QueryRequest
        {
            Subscriptions = new[] { subscriptionId },
            Query = query
        };

        var queryResponse = await resourceGraphClient.ResourcesAsync(queryRequest);

        Console.WriteLine("Resources associated with Disk Access:");
        foreach (var resource in queryResponse.Data.Rows)
        {
            Console.WriteLine($"- {resource[1]} ({resource[2]}) in {resource[3]}");
        }
    }
}
